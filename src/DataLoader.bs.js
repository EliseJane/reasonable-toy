// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var component = ReasonReact.reducerComponent("DataLoader");

function unSubScribe() {
  return /* () */0;
}

function subScribeToQuery(_, query, selfSend) {
  Curry._1(selfSend, /* UpdateData */Block.__(0, [query.query()]));
  return /* () */0;
}

function make(dataStore, query, children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */(function (self) {
              if (Caml_obj.caml_notequal(query, self[/* state */1][/* query */1]) || Caml_obj.caml_notequal(dataStore, self[/* state */1][/* dataStore */2])) {
                return /* record */[
                        /* data */undefined,
                        /* query */query,
                        /* dataStore */dataStore
                      ];
              } else {
                return self[/* state */1];
              }
            }),
          /* didMount */(function (self) {
              return subScribeToQuery(dataStore, Js_option.getExn(query), self[/* send */3]);
            }),
          /* didUpdate */(function (param) {
              var oldSelf = param[/* oldSelf */0];
              if (oldSelf[/* state */1][/* data */0] === undefined) {
                return subScribeToQuery(dataStore, Js_option.getExn(query), oldSelf[/* send */3]);
              } else {
                return 0;
              }
            }),
          /* willUnmount */(function () {
              return /* () */0;
            }),
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* data */0];
              if (match !== undefined) {
                return Curry._1(children, Js_primitive.valFromOption(match));
              } else {
                return null;
              }
            }),
          /* initialState */(function () {
              return /* record */[
                      /* data */undefined,
                      /* query */undefined,
                      /* dataStore */undefined
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (action.tag) {
                throw [
                      Caml_builtin_exceptions.match_failure,
                      /* tuple */[
                        "DataLoader.re",
                        40,
                        4
                      ]
                    ];
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* data */Js_primitive.some(action[0]),
                            /* query */state[/* query */1],
                            /* dataStore */state[/* dataStore */2]
                          ]]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.component = component;
exports.unSubScribe = unSubScribe;
exports.subScribeToQuery = subScribeToQuery;
exports.make = make;
/* component Not a pure module */
