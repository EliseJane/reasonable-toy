// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var V4 = require("uuid/v4");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var DraftJs = require("draft-js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var AreYouSure$ReactTemplate = require("../../shared/AreYouSure.bs.js");
var FormButtons$ReactTemplate = require("../../shared/FormButtons.bs.js");

function make(editorState, onChange, handleKeyCommand, children) {
  return ReasonReact.wrapJsForReason(DraftJs.Editor, {
              editorState: editorState,
              onChange: onChange,
              handleKeyCommand: handleKeyCommand
            }, children);
}

var Editor = /* module */[/* make */make];

var component = ReasonReact.reducerComponent("NoteForm");

function makeEditorWithCurrentNote(currentNote) {
  if (currentNote === undefined) {
    return DraftJs.EditorState.createEmpty();
  } else {
    var unwrappedNote = Js_option.getExn(currentNote);
    var currentText = unwrappedNote[/* text */3];
    return DraftJs.EditorState.createWithContent(DraftJs.ContentState.createFromText(currentText));
  }
}

function newNote(text, patient) {
  var today = (new Date());
  return /* record */[
          /* noteId */V4(),
          /* npid */patient[/* pid */0],
          /* date */today,
          /* text */text
        ];
}

function make$1(_, currentPatient, currentNote, _$1, addNote, _$2) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */(function (self) {
              if (Caml_obj.caml_notequal(self[/* state */1][/* currentNote */0], currentNote)) {
                var newEditorState = makeEditorWithCurrentNote(currentNote);
                var init = self[/* state */1];
                return /* record */[
                        /* currentNote */currentNote,
                        /* editorState */newEditorState,
                        /* confirmOpen */init[/* confirmOpen */2]
                      ];
              } else {
                return self[/* state */1];
              }
            }),
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* confirmOpen */2];
              return React.createElement("div", {
                          className: "noteForm"
                        }, ReasonReact.element(undefined, undefined, make(self[/* state */1][/* editorState */1], (function (editorState) {
                                    return Curry._1(self[/* send */3], /* ChangeState */[editorState]);
                                  }), (function (command) {
                                    var currentState = self[/* state */1][/* editorState */1];
                                    var newState = DraftJs.RichUtils.handleKeyCommand(currentState, command);
                                    if (newState !== undefined) {
                                      Curry._1(self[/* send */3], /* ChangeState */[Js_option.getExn(newState)]);
                                      return "handled";
                                    } else {
                                      return "not-handled";
                                    }
                                  }), /* array */[])), ReasonReact.element(undefined, undefined, FormButtons$ReactTemplate.make((function () {
                                    var editor = self[/* state */1][/* editorState */1];
                                    var content = editor.getCurrentContent();
                                    var text = content.getPlainText();
                                    return Curry._1(addNote, newNote(text, Js_option.getExn(currentPatient)));
                                  }), (function () {
                                    return Curry._1(self[/* send */3], /* ToggleConfirm */0);
                                  }), Js_primitive.some(self[/* state */1][/* editorState */1]), /* array */[])), match ? ReasonReact.element(undefined, undefined, AreYouSure$ReactTemplate.make((function () {
                                      Curry._1(self[/* send */3], /* ChangeState */[DraftJs.EditorState.createEmpty()]);
                                      return Curry._1(self[/* send */3], /* ToggleConfirm */0);
                                    }), (function () {
                                      return Curry._1(self[/* send */3], /* ToggleConfirm */0);
                                    }), undefined, /* array */[])) : null);
            }),
          /* initialState */(function () {
              return /* record */[
                      /* currentNote */currentNote,
                      /* editorState */makeEditorWithCurrentNote(currentNote),
                      /* confirmOpen */false
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (action) {
                return /* Update */Block.__(0, [/* record */[
                            /* currentNote */state[/* currentNote */0],
                            /* editorState */action[0],
                            /* confirmOpen */state[/* confirmOpen */2]
                          ]]);
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* currentNote */state[/* currentNote */0],
                            /* editorState */state[/* editorState */1],
                            /* confirmOpen */!state[/* confirmOpen */2]
                          ]]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.Editor = Editor;
exports.component = component;
exports.makeEditorWithCurrentNote = makeEditorWithCurrentNote;
exports.newNote = newNote;
exports.make = make$1;
/* component Not a pure module */
