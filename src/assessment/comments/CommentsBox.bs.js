// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var V4 = require("uuid/v4");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var AddNew$ReactTemplate = require("../../shared/AddNew.bs.js");
var Comment$ReactTemplate = require("./Comment.bs.js");
var EditComment$ReactTemplate = require("./EditComment.bs.js");

function newComment(summary, user, currentPatientVal) {
  var today = (new Date());
  return /* record */[
          /* commentId */V4(),
          /* cpid */currentPatientVal[/* pid */0],
          /* effectiveDateTime */today,
          /* assessor */user,
          /* summary */summary
        ];
}

var component = ReasonReact.reducerComponent("CommentsBox");

function make(user, patientComments, currentPatient, addComment, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* newOpen */0];
              return React.createElement("div", {
                          className: "commentsBox"
                        }, React.createElement("div", undefined, "Comments (click to edit)"), React.createElement("div", {
                              className: "comments"
                            }, $$Array.of_list(List.map((function (comment) {
                                        return ReasonReact.element(comment[/* commentId */0], undefined, Comment$ReactTemplate.make(comment, (function (text) {
                                                          return Curry._1(self[/* send */3], /* EditComment */[text]);
                                                        }), /* array */[]));
                                      }), patientComments)), ReasonReact.element(undefined, undefined, AddNew$ReactTemplate.make((function () {
                                        return Curry._1(self[/* send */3], /* ToggleNew */0);
                                      }), /* array */[]))), match ? ReasonReact.element(undefined, undefined, EditComment$ReactTemplate.make(self[/* state */1][/* selectedCommentText */1], (function (summary) {
                                      Curry._1(self[/* send */3], /* ToggleNew */0);
                                      var currentPatientVal = Js_option.getExn(currentPatient);
                                      return Curry._1(addComment, newComment(summary, user, currentPatientVal));
                                    }), (function () {
                                      return Curry._1(self[/* send */3], /* ToggleNew */0);
                                    }), /* array */[])) : null);
            }),
          /* initialState */(function () {
              return /* record */[
                      /* newOpen */false,
                      /* selectedCommentText */undefined
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (action) {
                return /* Update */Block.__(0, [/* record */[
                            /* newOpen */!state[/* newOpen */0],
                            /* selectedCommentText */action[0]
                          ]]);
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* newOpen */!state[/* newOpen */0],
                            /* selectedCommentText */state[/* selectedCommentText */1]
                          ]]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.newComment = newComment;
exports.component = component;
exports.make = make;
/* component Not a pure module */
