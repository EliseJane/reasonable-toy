// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Utils$ReactTemplate = require("./shared/Utils.bs.js");
var Decoder$ReactTemplate = require("./shared/Decoder.bs.js");
var Storage$ReactTemplate = require("./Storage.bs.js");
var Objective$ReactTemplate = require("./objective/Objective.bs.js");
var Assessment$ReactTemplate = require("./assessment/Assessment.bs.js");
var Subjective$ReactTemplate = require("./patients/Subjective.bs.js");
var CurrentInfo$ReactTemplate = require("./patients/CurrentInfo.bs.js");
var PatientsList$ReactTemplate = require("./patients/PatientsList.bs.js");
var TeamSelector$ReactTemplate = require("./patients/TeamSelector.bs.js");
var GenerateButtons$ReactTemplate = require("./GenerateButtons.bs.js");

function makeModels(data) {
  var notecrafts = List.map((function (o) {
          return /* record */[
                  /* notecraftId */o[/* observationId */0],
                  /* category */List.hd(List.hd(o[/* category */1])[/* coding */0])[/* code */0],
                  /* ncpid */Utils$ReactTemplate.extractId(o[/* subject */3][/* ref */0]),
                  /* value */o[/* value */4]
                ];
        }), List.filter((function (o) {
                return List.hd(o[/* code */2][/* coding */0])[/* code */0] === "gen";
              }))(data[/* observations */4]));
  var exams = List.map((function (o) {
          return /* record */[
                  /* examId */o[/* observationId */0],
                  /* epid */Utils$ReactTemplate.extractId(o[/* subject */3][/* ref */0]),
                  /* value */o[/* value */4]
                ];
        }), List.filter((function (o) {
                return List.hd(o[/* code */2][/* coding */0])[/* code */0] === "29545-1";
              }))(data[/* observations */4]));
  var comments = List.map((function (ci) {
          return /* record */[
                  /* commentId */ci[/* clinicalImpressionId */0],
                  /* cpid */Utils$ReactTemplate.extractId(ci[/* subject */5][/* ref */0]),
                  /* effectiveDateTime */ci[/* dateTime */3],
                  /* assessor */ci[/* assessor */4][/* ref */0],
                  /* summary */ci[/* summary */2]
                ];
        }), List.filter((function (ci) {
                return ci[/* description */1] === "Comment";
              }))(data[/* clinicalImpressions */3]));
  var notes = List.map((function (ci) {
          return /* record */[
                  /* noteId */ci[/* clinicalImpressionId */0],
                  /* npid */Utils$ReactTemplate.extractId(ci[/* subject */5][/* ref */0]),
                  /* date */ci[/* dateTime */3],
                  /* text */ci[/* summary */2]
                ];
        }), List.filter((function (ci) {
                return ci[/* description */1] === "Note";
              }))(data[/* clinicalImpressions */3]));
  return /* record */[
          /* comments */comments,
          /* notes */notes,
          /* patients */data[/* patients */0],
          /* practitioners */data[/* practitioners */1],
          /* teams */data[/* teams */2],
          /* notecrafts */notecrafts,
          /* exams */exams
        ];
}

function getTeamPatients(patients, currentTeam) {
  return List.flatten(List.map((function (id) {
                    return List.filter((function (p) {
                                    return p[/* pid */0] === id;
                                  }))(patients);
                  }), List.map((function (i) {
                        return Utils$ReactTemplate.extractId(i[/* item */0][/* ref */0]);
                      }), currentTeam[/* items */2])));
}

function getCurrentPatient(teamPatients) {
  var match = List.length(teamPatients) === 0;
  if (match) {
    return undefined;
  } else {
    return Js_primitive.some(List.hd(teamPatients));
  }
}

function getPatientComments(comments, currentPatient) {
  if (currentPatient !== undefined) {
    var currentPatient$1 = currentPatient;
    return List.filter((function (c) {
                    return c[/* cpid */1] === currentPatient$1[/* pid */0];
                  }))(comments);
  } else {
    return /* [] */0;
  }
}

function getPatientNotes(notes, currentPatient) {
  if (currentPatient !== undefined) {
    var currentPatient$1 = currentPatient;
    return List.filter((function (n) {
                    return n[/* npid */1] === currentPatient$1[/* pid */0];
                  }))(notes);
  } else {
    return /* [] */0;
  }
}

function getCurrentNote(patientNotes) {
  var match = List.length(patientNotes) === 0;
  if (match) {
    return undefined;
  } else {
    return Js_primitive.some(List.hd(patientNotes));
  }
}

function getPatientNotecrafts(notecrafts, currentPatient) {
  if (currentPatient !== undefined) {
    var currentPatient$1 = currentPatient;
    return List.filter((function (n) {
                    return n[/* ncpid */2] === currentPatient$1[/* pid */0];
                  }))(notecrafts);
  } else {
    return /* [] */0;
  }
}

function getPatientExams(exams, currentPatient) {
  if (currentPatient !== undefined) {
    var currentPatient$1 = currentPatient;
    return List.filter((function (e) {
                    return e[/* epid */1] === currentPatient$1[/* pid */0];
                  }))(exams);
  } else {
    return /* [] */0;
  }
}

var models = makeModels(Decoder$ReactTemplate.data);

var component = ReasonReact.reducerComponent("NoteAssembler");

function make($staropt$star, storage, _) {
  var practitionerId = $staropt$star !== undefined ? $staropt$star : "Dr. Foo";
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", {
                          className: "noteAssembler"
                        }, ReasonReact.element(undefined, undefined, Curry._2(Storage$ReactTemplate.Context[/* Provider */4][/* make */1], Js_primitive.some(storage), /* array */[
                                  React.createElement("div", {
                                        className: "mainTitle"
                                      }, "NoteAssembler"),
                                  ReasonReact.element(undefined, undefined, TeamSelector$ReactTemplate.make(self[/* state */1][/* teams */4], (function (newTeam) {
                                              return Curry._1(self[/* send */3], /* SwitchTeam */Block.__(6, [newTeam]));
                                            }), self[/* state */1][/* currentTeam */8], /* array */[])),
                                  ReasonReact.element(undefined, undefined, PatientsList$ReactTemplate.make(getTeamPatients(self[/* state */1][/* patients */5], self[/* state */1][/* currentTeam */8]), self[/* state */1][/* currentTeam */8][/* title */1], (function (newPatient) {
                                              return Curry._1(self[/* send */3], /* SwitchPatient */Block.__(0, [newPatient]));
                                            }), (function (oldPatient) {
                                              return Curry._1(self[/* send */3], /* RemovePatient */Block.__(1, [oldPatient]));
                                            }), (function (newPatient) {
                                              return Curry._1(self[/* send */3], /* AddPatient */Block.__(2, [newPatient]));
                                            }), /* array */[])),
                                  ReasonReact.element(undefined, undefined, CurrentInfo$ReactTemplate.make(self[/* state */1][/* currentPatient */9], /* array */[])),
                                  ReasonReact.element(undefined, undefined, Subjective$ReactTemplate.make(/* array */[])),
                                  ReasonReact.element(undefined, undefined, Objective$ReactTemplate.make(getPatientNotecrafts(self[/* state */1][/* notecrafts */2], self[/* state */1][/* currentPatient */9]), getPatientExams(self[/* state */1][/* exams */3], self[/* state */1][/* currentPatient */9]), /* array */[])),
                                  ReasonReact.element(undefined, undefined, Assessment$ReactTemplate.make(self[/* state */1][/* currentPatient */9], self[/* state */1][/* currentUser */1], getPatientComments(self[/* state */1][/* comments */6], self[/* state */1][/* currentPatient */9]), (function (newComment) {
                                              return Curry._1(self[/* send */3], /* AddComment */Block.__(3, [newComment]));
                                            }), (function (newNote) {
                                              return Curry._1(self[/* send */3], /* AddNote */Block.__(5, [newNote]));
                                            }), getPatientNotes(self[/* state */1][/* notes */7], self[/* state */1][/* currentPatient */9]), self[/* state */1][/* currentNote */10], (function (newNote) {
                                              return Curry._1(self[/* send */3], /* SwitchNote */Block.__(4, [newNote]));
                                            }), /* array */[])),
                                  ReasonReact.element(undefined, undefined, GenerateButtons$ReactTemplate.make(undefined, undefined, undefined, /* array */[]))
                                ])));
            }),
          /* initialState */(function () {
              var subscribedLists = List.flatten(List.map((function (id) {
                          return List.filter((function (l) {
                                          return l[/* teamId */0] === id;
                                        }))(models[/* teams */4]);
                        }), List.map((function (r) {
                              return Utils$ReactTemplate.extractId(r[/* item */0][/* ref */0]);
                            }), List.hd(List.filter((function (g) {
                                          return g[/* title */1] === practitionerId;
                                        }))(models[/* teams */4]))[/* items */2])));
              var patients = List.flatten(List.map((function (id) {
                          return List.filter((function (p) {
                                          return p[/* pid */0] === id;
                                        }))(models[/* patients */2]);
                        }), List.map((function (p) {
                              return Utils$ReactTemplate.extractId(p[/* item */0][/* ref */0]);
                            }), List.flatten(List.map((function (l) {
                                      return l[/* items */2];
                                    }), subscribedLists)))));
              var comments = List.flatten(List.map((function (p) {
                          return List.filter((function (c) {
                                          return c[/* cpid */1] === p;
                                        }))(models[/* comments */0]);
                        }), List.map((function (p) {
                              return p[/* pid */0];
                            }), patients)));
              var notes = List.flatten(List.map((function (p) {
                          return List.filter((function (n) {
                                          return n[/* npid */1] === p;
                                        }))(models[/* notes */1]);
                        }), List.map((function (p) {
                              return p[/* pid */0];
                            }), patients)));
              var currentTeam = List.hd(subscribedLists);
              var currentPatient = getCurrentPatient(getTeamPatients(patients, currentTeam));
              var currentNote = getCurrentNote(getPatientNotes(notes, currentPatient));
              return /* record */[
                      /* practitioners */models[/* practitioners */3],
                      /* currentUser */practitionerId,
                      /* notecrafts */models[/* notecrafts */5],
                      /* exams */models[/* exams */6],
                      /* teams */subscribedLists,
                      /* patients */patients,
                      /* comments */comments,
                      /* notes */notes,
                      /* currentTeam */currentTeam,
                      /* currentPatient */currentPatient,
                      /* currentNote */currentNote
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              switch (action.tag | 0) {
                case 0 : 
                    var newPatient = action[0];
                    var patientNotes = getPatientNotes(state[/* notes */7], newPatient);
                    var newNote = getCurrentNote(patientNotes);
                    return /* Update */Block.__(0, [/* record */[
                                /* practitioners */state[/* practitioners */0],
                                /* currentUser */state[/* currentUser */1],
                                /* notecrafts */state[/* notecrafts */2],
                                /* exams */state[/* exams */3],
                                /* teams */state[/* teams */4],
                                /* patients */state[/* patients */5],
                                /* comments */state[/* comments */6],
                                /* notes */state[/* notes */7],
                                /* currentTeam */state[/* currentTeam */8],
                                /* currentPatient */newPatient,
                                /* currentNote */newNote
                              ]]);
                case 1 : 
                    var oldPatient = action[0];
                    var newPatients = List.filter((function (p) {
                              return p[/* pid */0] !== oldPatient[/* pid */0];
                            }))(state[/* patients */5]);
                    var newPatient$1 = state[/* currentPatient */9];
                    if (Caml_obj.caml_equal(oldPatient, Js_option.getExn(newPatient$1))) {
                      var teamPatients = getTeamPatients(newPatients, state[/* currentTeam */8]);
                      newPatient$1 = getCurrentPatient(teamPatients);
                    }
                    return /* Update */Block.__(0, [/* record */[
                                /* practitioners */state[/* practitioners */0],
                                /* currentUser */state[/* currentUser */1],
                                /* notecrafts */state[/* notecrafts */2],
                                /* exams */state[/* exams */3],
                                /* teams */state[/* teams */4],
                                /* patients */newPatients,
                                /* comments */state[/* comments */6],
                                /* notes */state[/* notes */7],
                                /* currentTeam */state[/* currentTeam */8],
                                /* currentPatient */newPatient$1,
                                /* currentNote */state[/* currentNote */10]
                              ]]);
                case 2 : 
                    var newPatient$2 = action[0];
                    var newPatients$1 = List.append(state[/* patients */5], /* :: */[
                          newPatient$2,
                          /* [] */0
                        ]);
                    var newEntry = /* record */[/* item : record */[/* ref */"Patient/" + newPatient$2[/* pid */0]]];
                    var newEntries = List.append(state[/* currentTeam */8][/* items */2], /* :: */[
                          newEntry,
                          /* [] */0
                        ]);
                    var init = state[/* currentTeam */8];
                    var newTeam_000 = /* teamId */init[/* teamId */0];
                    var newTeam_001 = /* title */init[/* title */1];
                    var newTeam = /* record */[
                      newTeam_000,
                      newTeam_001,
                      /* items */newEntries
                    ];
                    var newTeams = List.append(List.filter((function (team) {
                                  return Caml_obj.caml_notequal(team, state[/* currentTeam */8]);
                                }))(state[/* teams */4]), /* :: */[
                          newTeam,
                          /* [] */0
                        ]);
                    return /* Update */Block.__(0, [/* record */[
                                /* practitioners */state[/* practitioners */0],
                                /* currentUser */state[/* currentUser */1],
                                /* notecrafts */state[/* notecrafts */2],
                                /* exams */state[/* exams */3],
                                /* teams */newTeams,
                                /* patients */newPatients$1,
                                /* comments */state[/* comments */6],
                                /* notes */state[/* notes */7],
                                /* currentTeam */newTeam,
                                /* currentPatient */state[/* currentPatient */9],
                                /* currentNote */state[/* currentNote */10]
                              ]]);
                case 3 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* practitioners */state[/* practitioners */0],
                                /* currentUser */state[/* currentUser */1],
                                /* notecrafts */state[/* notecrafts */2],
                                /* exams */state[/* exams */3],
                                /* teams */state[/* teams */4],
                                /* patients */state[/* patients */5],
                                /* comments */List.append(state[/* comments */6], /* :: */[
                                      action[0],
                                      /* [] */0
                                    ]),
                                /* notes */state[/* notes */7],
                                /* currentTeam */state[/* currentTeam */8],
                                /* currentPatient */state[/* currentPatient */9],
                                /* currentNote */state[/* currentNote */10]
                              ]]);
                case 4 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* practitioners */state[/* practitioners */0],
                                /* currentUser */state[/* currentUser */1],
                                /* notecrafts */state[/* notecrafts */2],
                                /* exams */state[/* exams */3],
                                /* teams */state[/* teams */4],
                                /* patients */state[/* patients */5],
                                /* comments */state[/* comments */6],
                                /* notes */state[/* notes */7],
                                /* currentTeam */state[/* currentTeam */8],
                                /* currentPatient */state[/* currentPatient */9],
                                /* currentNote */action[0]
                              ]]);
                case 5 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* practitioners */state[/* practitioners */0],
                                /* currentUser */state[/* currentUser */1],
                                /* notecrafts */state[/* notecrafts */2],
                                /* exams */state[/* exams */3],
                                /* teams */state[/* teams */4],
                                /* patients */state[/* patients */5],
                                /* comments */state[/* comments */6],
                                /* notes */List.append(state[/* notes */7], /* :: */[
                                      action[0],
                                      /* [] */0
                                    ]),
                                /* currentTeam */state[/* currentTeam */8],
                                /* currentPatient */state[/* currentPatient */9],
                                /* currentNote */state[/* currentNote */10]
                              ]]);
                case 6 : 
                    var newTeam$1 = action[0];
                    var teamPatients$1 = getTeamPatients(state[/* patients */5], newTeam$1);
                    var newPatient$3 = getCurrentPatient(teamPatients$1);
                    var patientNotes$1 = getPatientNotes(state[/* notes */7], newPatient$3);
                    var newNote$1 = getCurrentNote(patientNotes$1);
                    return /* Update */Block.__(0, [/* record */[
                                /* practitioners */state[/* practitioners */0],
                                /* currentUser */state[/* currentUser */1],
                                /* notecrafts */state[/* notecrafts */2],
                                /* exams */state[/* exams */3],
                                /* teams */state[/* teams */4],
                                /* patients */state[/* patients */5],
                                /* comments */state[/* comments */6],
                                /* notes */state[/* notes */7],
                                /* currentTeam */newTeam$1,
                                /* currentPatient */newPatient$3,
                                /* currentNote */newNote$1
                              ]]);
                
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.makeModels = makeModels;
exports.getTeamPatients = getTeamPatients;
exports.getCurrentPatient = getCurrentPatient;
exports.getPatientComments = getPatientComments;
exports.getPatientNotes = getPatientNotes;
exports.getCurrentNote = getCurrentNote;
exports.getPatientNotecrafts = getPatientNotecrafts;
exports.getPatientExams = getPatientExams;
exports.models = models;
exports.component = component;
exports.make = make;
/* models Not a pure module */
